{"version":3,"sources":["client13jsonRWS.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","eventEmitter","jsonRWS","raw","helper","Client13jsonRWS","[object Object]","wcOpts","this","wsocket","socketID","attempt","subprotocolLib","generateID","wsURL","test","WebSocket","subprotocols","onEvents","Promise","resolve","once","close","blockReconnect","attempts","reconnectAttempts","delay","reconnectDelay","sleep","connect","console","log","onopen","async","openEvt","protocol","onMessage","emit","onclose","closeEvt","reconnect","onerror","errorEvt","subprotocol","addEventListener","event","msgSTR","data","debugger","RegExp","delimiter","msg","incoming","detail","cmd","err","to","payload","msgObj","id","from","outgoing","readyState","setTimeout","send","carryOut","undefined","reject","questionTimeout","answer","question","roomName","nickname","uri","body","eventName","listener","on","off","offAll","textParts","text","join","debug","window","regochWebsocket","../../lib/helper","../../lib/subprotocol/jsonRWS","../../lib/subprotocol/raw","./aux/eventEmitter","2","activeOns","evt","CustomEvent","dispatchEvent","listenerWindow","detailValues","_getDetailValues","_removeOne","push","ind","activeOn","removeEventListener","splice","toString","reg2","reg3","listenerStr","matched","match","split","map","arg","trim","error","3","rrr","Math","random","replace","substring","Date","toISOString","now","Intl","DateTimeFormat","weekday","year","month","day","hour","minute","second","fractionalSecondDigits","hour12","timeZone","format","ms","buff","perRow","bytes","byte","key","4","tf","JSON","parse","msgObjProperties","Object","keys","_testFields","stringify","socket","dataTransfer","socketStorage","toSocket","findOne","sendOne","socketIDs","sockets","find","$in","broadcast","sendAll","setNick","extension","message","sendSelf","roomEnter","roomExit","roomExitAll","sendRoom","socket_ids_nicks","rooms","roomList","roomListOf","allowedFields","requiredFields","prop","indexOf","requiredField","5"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n * Websocket Client for Browser\n * - websocket version: 13\n * - subprotocol: jsonRWS\n */\nconst eventEmitter = require('./aux/eventEmitter');\nconst jsonRWS = require('../../lib/subprotocol/jsonRWS');\nconst raw = require('../../lib/subprotocol/raw');\nconst helper = require('../../lib/helper');\n\n\nclass Client13jsonRWS {\n\n  /**\n   * @param {{wsURL:string, questionTimeout:number, reconnectAttempts:number, reconnectDelay:number, subprotocols:string[], debug:boolean}} wcOpts - websocket client options\n   */\n  constructor(wcOpts) {\n    this.wcOpts = wcOpts; // websocket client options\n    this.wsocket; // Websocket instance https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n    this.socketID; // socket ID number, for example: 210214082949459100\n    this.attempt = 1; // reconnect attempt counter\n    this.subprotocolLib;\n  }\n\n\n  /************* CLIENT CONNECTOR ************/\n  /**\n   * Connect to the websocket server.\n   * @returns {Promise<WebSocket>}\n   */\n  connect() {\n    this.socketID = helper.generateID();\n    let wsURL = this.wcOpts.wsURL; // websocket URL: ws://localhost:3211/something?authkey=TRTmrt\n    if (/\\?[a-zA-Z0-9]/.test(wsURL)) { wsURL += `&socketID=${this.socketID}`; }\n    else { wsURL += `socketID=${this.socketID}`; }\n\n    this.wsocket = new WebSocket(wsURL, this.wcOpts.subprotocols);\n\n    this.onEvents();\n\n    // return socket as promise\n    return new Promise(resolve => {\n      // eventEmitter.removeAllListeners(); // not needed if once() is used\n      eventEmitter.once('connected', () => { resolve(this.wsocket); });\n      // console.log(`\"connected\" listeners: ${eventEmitter.listenerCount('connected')}`.cliBoja('yellow'));\n    });\n  }\n\n\n  /**\n   * Disconnect from the websocket server.\n   */\n  disconnect() {\n    if (!!this.wsocket) { this.wsocket.close(); }\n    this.blockReconnect();\n  }\n\n\n  /**\n   * Try to reconnect the client when the socket is closed.\n   * This method is fired on every 'close' socket's event.\n   */\n  async reconnect() {\n    const attempts = this.wcOpts.reconnectAttempts;\n    const delay = this.wcOpts.reconnectDelay;\n    if (this.attempt <= attempts) {\n      await helper.sleep(delay);\n      this.connect();\n      console.log(`Reconnect attempt #${this.attempt} of ${attempts} in ${delay}ms`);\n      this.attempt++;\n    }\n  }\n\n\n  /**\n   * Block reconnect usually after disconnect() method is used.\n   */\n  blockReconnect() {\n    this.attempt = this.wcOpts.reconnectAttempts + 1;\n  }\n\n\n\n  /**\n   * Event listeners.\n   */\n  onEvents() {\n    this.wsocket.onopen = async (openEvt) => {\n      console.log(`WS Connection opened -- socketID: ${this.socketID}, subprotocol(handshaked): \"${this.wsocket.protocol}\"`);\n\n      this.onMessage();\n\n      this.attempt = 1;\n\n      // define subprotocol library\n      if (!!this.wsocket && this.wsocket.protocol === 'raw') { this.subprotocolLib = raw; }\n      else if (!!this.wsocket && this.wsocket.protocol === 'jsonRWS') { this.subprotocolLib = jsonRWS; }\n      else { this.subprotocolLib = raw; }\n\n      eventEmitter.emit('connected');\n    };\n\n    this.wsocket.onclose = (closeEvt) => {\n      console.log('WS Connection closed');\n      delete this.wsocket; // Websocket instance https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n      delete this.socketID;\n      this.reconnect();\n    };\n\n    this.wsocket.onerror = (errorEvt) => {\n      // console.error(errorEvt);\n    };\n  }\n\n\n\n  /************* RECEIVERS ************/\n  /**\n   * Receive the message as buffer and convert it in the appropriate subprotocol format.\n   * If toEmit is true push it to eventEmitter as 'message' event.\n   */\n  onMessage() {\n    if (!this.wsocket) { return; }\n    const subprotocol = this.wsocket.protocol; // jsonRWS || raw\n\n    this.wsocket.addEventListener('message', event => {\n      try {\n        const msgSTR = event.data;\n        this.debugger('Received::', msgSTR);\n\n        /**\n           * Test if the message contains the delimiter.\n           * Delimiter is important because the network is splitting large message in the chunks of data so we need to know when the message reached the end and new message is starting.\n           * A TCP network chunk is around 1500 bytes. To check it use linux command: $ ifconfig | grep -i MTU\n           * Related terms are TCP MTU (Maximum Transmission Unit) and TCP MSS (Maximum Segment Size) --> (MSS = MTU - TCPHdrLen - IPHdrLen)\n           */\n        const delimiter_reg = new RegExp(this.subprotocolLib.delimiter);\n        if (!delimiter_reg.test(msgSTR)) { return; }\n\n        const msg = this.subprotocolLib.incoming(msgSTR);\n\n        // dispatch\n        const detail = { msg, msgSTR };\n        if (msg.cmd === 'route' && subprotocol === 'jsonRWS') { eventEmitter.emit('route', detail); }\n        else if (msg.cmd === 'server-error' && subprotocol === 'jsonRWS') { this.blockReconnect(); eventEmitter.emit('server-error', detail); }\n        else if (/^question\\//.test(msg.cmd) && subprotocol === 'jsonRWS') { eventEmitter.emit('question', detail); }\n        else { eventEmitter.emit('message', detail); }\n\n      } catch (err) {\n        eventEmitter.emit('message-error', err);\n      }\n    });\n\n  }\n\n\n  /************* SENDERS ************/\n  /**\n   * Send message to the websocket server if the connection is not closed (https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState).\n   * @param {number|number[]} to - final destination: 210201164339351900\n   * @param {string} cmd - command\n   * @param {any} payload - message payload\n   */\n  async carryOut(to, cmd, payload) {\n    const id = helper.generateID(); // the message ID\n    const from = +this.socketID; // the sender ID\n    if (!to) { to = 0; } // server ID is 0\n    const msgObj = { id, from, to, cmd, payload };\n    const msg = jsonRWS.outgoing(msgObj);\n    this.debugger('Sent::', msg);\n\n    // the message must be defined and client must be connected to the server\n    if (!!msg && !!this.wsocket && this.wsocket.readyState === 1) {\n      await new Promise(r => setTimeout(r, 0));\n      await this.wsocket.send(msg);\n    } else {\n      throw new Error('The message is not defined or the client is disconnected.');\n    }\n  }\n\n\n  /**\n   * Send message (payload) to one client.\n   * @param {number} to - 210201164339351900\n   * @param {any} msg - message sent to the client\n   */\n  async sendOne(to, msg) {\n    const cmd = 'socket/sendone';\n    const payload = msg;\n    await this.carryOut(to, cmd, payload);\n  }\n\n\n  /**\n   * Send message (payload) to one or more clients.\n   * @param {number[]} to - [210205081923171300, 210205082042463230]\n   * @param {any} msg - message sent to the clients\n   */\n  async send(to, msg) {\n    const cmd = 'socket/send';\n    const payload = msg;\n    await this.carryOut(to, cmd, payload);\n  }\n\n\n  /**\n   * Send message (payload) to all clients except the sender.\n   * @param {any} msg - message sent to the clients\n   */\n  async broadcast(msg) {\n    const to = 0;\n    const cmd = 'socket/broadcast';\n    const payload = msg;\n    await this.carryOut(to, cmd, payload);\n  }\n\n  /**\n   * Send message (payload) to all clients and the sender.\n   * @param {any} msg - message sent to the clients\n   */\n  async sendAll(msg) {\n    const to = 0;\n    const cmd = 'socket/sendall';\n    const payload = msg;\n    await this.carryOut(to, cmd, payload);\n  }\n\n\n\n  /******************************* QUESTIONS ******************************/\n  /*** Send a question to the websocket server and wait for the answer. ***/\n\n  /**\n   * Send question and expect the answer.\n   * @param {string} cmd - command\n   * @returns {Promise<object>}\n   */\n  question(cmd) {\n    // send the question\n    const to = this.socketID;\n    const payload = undefined;\n    this.carryOut(to, cmd, payload);\n\n    // receive the answer\n    return new Promise(async (resolve, reject) => {\n      this.once('question', msg => { if (msg.cmd === cmd) { resolve(msg); } });\n      await helper.sleep(this.wcOpts.questionTimeout);\n      reject(new Error(`No answer for the question: ${cmd}`));\n    });\n  }\n\n\n  /**\n   * Send question about my socket ID.\n   * @returns {Promise<number>}\n   */\n  async questionSocketId() {\n    const answer = await this.question('question/socket/id');\n    this.socketID = +answer.payload;\n    return this.socketID;\n  }\n\n  /**\n   * Send question about all socket IDs connected to the server.\n   * @returns {Promise<number[]>}\n   */\n  async questionSocketList() {\n    const answer = await this.question('question/socket/list');\n    return answer.payload;\n  }\n\n  /**\n   * Send question about all rooms in the server.\n   * @returns {Promise<{name:string, socketIds:number[]}[]>}\n   */\n  async questionRoomList() {\n    const answer = await this.question('question/room/list');\n    return answer.payload;\n  }\n\n  /**\n   * Send question about all rooms where the client was entered.\n   * @returns {Promise<{name:string, socketIds:number[]}[]>}\n   */\n  async questionRoomListmy() {\n    const answer = await this.question(`question/room/listmy`);\n    return answer.payload;\n  }\n\n\n\n\n  /************* ROOMS ************/\n  /**\n   * Subscribe in the room.\n   * @param {string} roomName\n   */\n  async roomEnter(roomName) {\n    const to = 0;\n    const cmd = 'room/enter';\n    const payload = roomName;\n    await this.carryOut(to, cmd, payload);\n  }\n\n  /**\n   * Unsubscribe from the room.\n   * @param {string} roomName\n   */\n  async roomExit(roomName) {\n    const to = 0;\n    const cmd = 'room/exit';\n    const payload = roomName;\n    await this.carryOut(to, cmd, payload);\n  }\n\n  /**\n   * Unsubscribe from all rooms.\n   */\n  async roomExitAll() {\n    const to = 0;\n    const cmd = 'room/exitall';\n    const payload = undefined;\n    await this.carryOut(to, cmd, payload);\n  }\n\n  /**\n   * Send message to the room.\n   * @param {string} roomName\n   * @param {any} msg\n   */\n  async roomSend(roomName, msg) {\n    const to = roomName;\n    const cmd = 'room/send';\n    const payload = msg;\n    await this.carryOut(to, cmd, payload);\n  }\n\n\n\n\n  /********* MISC *********/\n  /**\n   * Setup a nick name.\n   * @param {string} nickname - nick name\n   */\n  async setNick(nickname) {\n    const to = 0;\n    const cmd = 'socket/nick';\n    const payload = nickname;\n    await this.carryOut(to, cmd, payload);\n  }\n\n\n  /**\n   * Send route command.\n   * @param {string} uri - route URI, for example /shop/product/55\n   * @param {any} body - body\n   */\n  async route(uri, body) {\n    const to = 0;\n    const cmd = 'route';\n    const payload = { uri, body };\n    await this.carryOut(to, cmd, payload);\n  }\n\n\n\n\n  /*********** LISTENERS ************/\n  /**\n   * Listen the event.\n   * @param {string} eventName - event name: 'connected', 'message', 'message-error', 'route', 'question', 'server-error'\n   * @param {Function} listener - callback function, for example: (msg, msgSTR) => { console.log(msgSTR); }\n   */\n  on(eventName, listener) {\n    eventEmitter.on(eventName, listener);\n  }\n\n  /**\n   * Listen the event only one time.\n   * @param {string} eventName - event name: 'connected', 'message', 'message-error', 'route', 'question', 'server-error'\n   * @param {Function} listener - callback function, for example: (msg, msgSTR) => { console.log(msgSTR); }\n   */\n  once(eventName, listener) {\n    return eventEmitter.once(eventName, listener);\n  }\n\n  /**\n   * Stop listening the event.\n   * @param {string} eventName - event name: 'connected', 'message', 'message-error', 'route', 'question', 'server-error'\n   * @param {Function} listener - callback function, for example: (msg, msgSTR) => { console.log(msgSTR); }\n   */\n  off(eventName, listener) {\n    return eventEmitter.off(eventName, listener);\n  }\n\n  /**\n   * Stop listening all events.\n   * @param {string} eventName - event name: 'connected', 'message', 'message-error', 'route', 'question', 'server-error'\n   */\n  offAll(eventName) {\n    return eventEmitter.offAll(eventName);\n  }\n\n\n\n\n  /******* OTHER ********/\n  /**\n   * Debugger. Use it as this.debug(var1, var2, var3)\n   */\n  debugger(...textParts) {\n    const text = textParts.join('');\n    if (this.wcOpts.debug) { console.log(text); }\n  }\n\n\n\n\n}\n\n\n\n\n// NodeJS\nif (typeof module !== 'undefined') {\n  module.exports = Client13jsonRWS;\n}\n\n// Browser\nif (typeof window !== 'undefined') {\n  window.regochWebsocket = { Client13jsonRWS };\n}\n\n},{\"../../lib/helper\":3,\"../../lib/subprotocol/jsonRWS\":4,\"../../lib/subprotocol/raw\":5,\"./aux/eventEmitter\":2}],2:[function(require,module,exports){\n/**\n * The EventEmitter based on window CustomEvent. Inspired by the NodeJS event lib.\n * Used in:\n * - regoch-spa / lib\n * - regoch-websocket / clientBrowser/src/aux\n */\nclass EventEmitter {\n\n  constructor() {\n    this.activeOns = []; // [{eventName:string, listener:Function, listenerWindow:Function}]\n  }\n\n\n  /**\n   * Create and emit the event\n   * @param {string} eventName - event name, for example: 'pushstate'\n   * @param {any} detail - event argument\n   * @returns {void}\n   */\n  emit(eventName, detail = {}) {\n    const evt = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(evt);\n  }\n\n\n  /**\n   * Listen for the event\n   * @param {string} eventName - event name, for example: 'pushstate'\n   * @param {Function} listener - callback function, for example msg => {...}\n   * @returns {void}\n   */\n  on(eventName, listener) {\n    const listenerWindow = event => {\n      const detailValues = this._getDetailValues(listener, event.detail);\n      listener.call(null, ...detailValues);\n    };\n\n    this._removeOne(eventName, listener);\n    this.activeOns.push({ eventName, listener, listenerWindow });\n    window.addEventListener(eventName, listenerWindow);\n  }\n\n\n  /**\n   * Listen for the event only once\n   * @param {string} eventName - event name, for example: 'pushstate'\n   * @param {Function} listener - callback function\n   * @returns {void}\n   */\n  once(eventName, listener) {\n    const listenerWindow = event => {\n      const detailValues = this._getDetailValues(listener, event.detail);\n      listener.call(null, ...detailValues);\n\n      this._removeOne(eventName, listener, listenerWindow);\n    };\n\n    window.addEventListener(eventName, listenerWindow, { once: true });\n  }\n\n\n  /**\n   * Stop listening the event for specific listener.\n   * @param {string} eventName - event name, for example: 'pushstate'\n   * @param {Function} listener - callback function, for example msg => {...}\n   * @returns {void}\n   */\n  off(eventName, listener) {\n    this._removeOne(eventName, listener);\n  }\n\n\n  /**\n   * Stop listening the event for all listeners defined with on().\n   * For example eventEmitter.on('msg', fja1) & eventEmitter.on('msg', fja2) then eventEmitter.off('msg') will remove fja1 and fja2 listeners.\n   * @param {string} eventName - event name, for example: 'pushstate'\n   * @returns {void}\n   */\n  offAll(eventName) {\n    let ind = 0;\n    for (const activeOn of this.activeOns) {\n      if (activeOn.eventName === eventName) {\n        window.removeEventListener(activeOn.eventName, activeOn.listenerWindow);\n        this.activeOns.splice(ind, 1);\n      }\n      ind++;\n    }\n  }\n\n\n  /**\n   * Get all active listeners.\n   * @returns {{eventName:string, listener:Function, listenerWindow:Function}[]}\n   */\n  getListeners() {\n    return { ...this.activeOns };\n  }\n\n\n\n\n\n  /*** PRIVATES ***/\n  /**\n   * Remove a listener from window and this.activeOns\n   */\n  _removeOne(eventName, listener) {\n    if (!listener) { throw new Error('eventEmitter._removeOne Error: listener is not defined'); }\n    let ind = 0;\n    for (const activeOn of this.activeOns) {\n      if (activeOn.eventName === eventName && activeOn.listener.toString() === listener.toString()) {\n        window.removeEventListener(activeOn.eventName, activeOn.listenerWindow);\n        this.activeOns.splice(ind, 1);\n      }\n      ind++;\n    }\n  }\n\n\n  /**\n   * Get values from the event.detail object\n   * @param {Function} listener - callback function\n   * @param {object} detail - event.detail object, for example {msg, msgSTR}\n   * @returns {Array} - an array of the detail values (selected by the listener arguments)\n   */\n  _getDetailValues(listener, detail) {\n    if (!listener) { throw new Error('eventEmitter._getDetailValues Error: listener is not defined'); }\n    // console.log('\\n------ _getDetailValues() ------');\n    // console.log('listener::', listener.toString());\n\n    // get listener function arguments\n    const reg1 = /\\((.*)\\)\\s*\\=\\>/; // (msg) =>\n    const reg2 = /(.+)\\s*\\=\\>/; // msg =>\n    const reg3 = /function\\s*\\((.*)\\)/; // function(msg)\n\n    const listenerStr = listener.toString();\n\n    let matched = listenerStr.match(reg1);\n    if (!matched) { matched = listenerStr.match(reg2); }\n    if (!matched) { matched = listenerStr.match(reg3); }\n    if (!matched) { console.error(`_getDetailValues Err:: The listener is not valid ! listener:: ${listener.toString()}`); return; }\n\n    // console.log('matched:::', matched);\n    const args_str = matched[1];\n    const args = args_str.split(',').map(arg => arg.trim()); // ['msg', 'msgSTR']\n\n    // get detail values\n    const detailValues = args.map(arg => detail[arg]);\n    // console.log('detailValues:::', detailValues);\n\n    return detailValues;\n  }\n\n\n\n\n\n}\n\n\nmodule.exports = new EventEmitter();\n\n},{}],3:[function(require,module,exports){\nclass Helper {\n\n  /**\n   * Create unique id. It's combination of timestamp and random number 'r'\n   * in format: YYMMDDHHmmssSSSrrr ---> YY year, MM month, DD day, HH hour, mm min, ss sec, SSS ms, rrr 3 random digits\n   * 18 digits in total, for example: 210129163129492100\n   * @returns {number}\n   */\n  generateID() {\n    const rnd = Math.random().toString();\n    const rrr = rnd.replace('0.', '').substring(0, 3);\n\n    const timestamp = new Date(); // UTC (Greenwich time)\n    const tsp = timestamp.toISOString()\n      .replace(/^20/, '')\n      .replace(/\\-/g, '')\n      .replace(/\\:/g, '')\n      .replace('T', '')\n      .replace('Z', '')\n      .replace('.', '');\n\n    const id = +(tsp + rrr);\n    return id;\n  }\n\n\n  /**\n   * Gives now time in nice format -> Friday, 1/29/2021, 16:31:29.801\n   * @returns {string}\n   */\n  nowTime() {\n    const now = new Date();\n    const formatter = new Intl.DateTimeFormat('en-us', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      fractionalSecondDigits: 3,\n      hour12: false,\n      timeZone: 'UTC'\n    });\n    return formatter.format(now);\n  }\n\n\n  /**\n   * Pause the code execution\n   * @param {number} ms - miliseconds\n   * @returns {Promise}\n   */\n  async sleep(ms) {\n    await new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n\n\n  /**\n   * Print all buffer values as string. The bytes are printed separately, for example byte 81, byte 7e ...etc\n   * For example: 81 7e 00 8b 7b 22 69 64 22 3a 32 31 30 32 31 34 31 30\n   * @param {Buffer} buff\n   * @returns {void}\n   */\n  printBuffer(buff) {\n    console.log(buff.toString('hex').match(/../g).join(' '));\n  }\n\n\n  /**\n   * Print buffer in nice table of bytes.\n   * @param {Buffer} buff - bytes\n   * @param {number} perRow - how many bytes present per row (per line)\n   */\n  tableOfBytes(buff, perRow) {\n    let bytes = buff.toString('hex').match(/../g);\n\n    // add new line\n    bytes = bytes.map((byte, key) => {\n      if (key === 0) { byte = '\\n ' + byte; }\n      if ((key + 1) % perRow === 0) { byte += '\\n'; }\n      return byte;\n    });\n\n    const str = bytes.join(' ');\n    return str;\n  }\n\n\n}\n\n\n\n\nmodule.exports = new Helper();\n\n},{}],4:[function(require,module,exports){\n/**\n * Subprotocol name: jsonRWS\n * HTTP header: \"Sec-WebSocket-Protocol\": \"jsonRWS\"\n *\n * Subprotocol description:\n *  This subprotocol is created for communication between websocket server and client.\n *\n * Subprotocol definitons:\n *  a) Client have to send message in valid JSON format. Allowed fields: id, from, to, cmd, payload.\n *  b) Server have to send message in valid JSON format. Allowed fields: id, from, to, cmd, payload.\n *  c) The message is converted from string to object.\n */\n\n\nclass JsonRWS {\n\n  constructor() {\n    this.delimiter = '<<!END!>>';\n  }\n\n  /*********** INCOMING MESSAGES ***********/\n  /**\n   * Execute the jsonRWS subprotocol for incoming messages. Filter and map incoming messages.\n   * 1. Test if the message has valid \"jsonRWS\" format {id:number, from:number, to:number|number[]|string, cmd:string, payload?:any}.\n   * 2. Convert the message from string to object.\n   * @param {string} msgSTR -incoming message\n   * @returns {{id:number, from:number, to:number|number[]|string, cmd:string, payload?:any}}\n   */\n  incoming(msgSTR) {\n    let tf = false;\n    let msg;\n    try {\n      msgSTR = msgSTR.replace(this.delimiter, ''); // remove delimiter\n      msg = JSON.parse(msgSTR);\n      const msgObjProperties = Object.keys(msg);\n      tf = this._testFields(msgObjProperties);\n    } catch (err) {\n      tf = false;\n    }\n\n    if (tf) { return msg; }\n    else { throw new Error(`Incoming message doesn\\'t have valid \"jsonRWS\" subprotocol format. msg:: \"${msgSTR}\"`); }\n  }\n\n\n\n  /*********** OUTGOING MESSAGES ***********/\n  /**\n   * Execute the jsonRWS subprotocol for outgoing messages. Filter and map outgoing messages.\n   * 1. Test if the message has valid \"jsonRWS\" format {id:number, from:number, to:number|number[]|string, cmd:string, payload:any}.\n   * 2. Convert the message from object to string.\n   * @param {{id:number, from:number, to:number|number[]|string, cmd:string, payload?:any}} msg - outgoing message\n   * @returns {string}\n   */\n  outgoing(msg) {\n    const msgObjProperties = Object.keys(msg);\n    const tf = this._testFields(msgObjProperties);\n\n    if (tf) {\n      const msgSTR = JSON.stringify(msg) + this.delimiter;\n      return msgSTR;\n    } else {\n      throw new Error(`Outgoing message doesn\\'t have valid \"jsonRWS\" subprotocol format. msg:: ${JSON.stringify(msg)}`);\n    }\n  }\n\n\n\n  /*********** PROCESS MESSAGES ***********/\n  /**\n   * Process client messages internally.\n   * @param {object} msg - instruction message - {id, from, to, cmd, payload}\n   * @param {Socket} socket - client which received the message\n   * @param {DataTransfer} dataTransfer - instance of the DataTransfer\n   * @param {SocketStorage} socketStorage - instance of the SockketStorage\n   * @param {EventEmitter} eventEmitter - event emitter initiated in the RWS.js\n   */\n  async process(msg, socket, dataTransfer, socketStorage, eventEmitter) {\n    const id = msg.id;\n    const from = msg.from;\n    const to = msg.to;\n    const cmd = msg.cmd;\n    const payload = msg.payload;\n\n\n    /*** socket commands ***/\n    if (cmd === 'socket/sendone') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 210201164339351900, cmd: 'socket/sendone', payload: 'Some message to another client'}\n      const id = +msg.to;\n      const toSocket = await socketStorage.findOne({id});\n      dataTransfer.sendOne(msg, toSocket); }\n\n    else if (cmd === 'socket/send') {\n      // {id: 210129163129492000, from: 210129163129492111, to: [210201164339351900, 210201164339351901], cmd: 'socket/send', payload: 'Some message to another client(s)'}\n      const socketIDs = to.map(socketID => +socketID); // convert to numbers\n      const sockets = await socketStorage.find({id: {$in: socketIDs}});\n      dataTransfer.send(msg, sockets); }\n\n    else if (cmd === 'socket/broadcast') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 0, cmd: 'socket/broadcast', payload: 'Some message to all clients except the sender'}\n      dataTransfer.broadcast(msg, socket); }\n\n    else if (cmd === 'socket/sendall') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 0, cmd: 'socket/sendall', payload: 'Some message to all clients and the sender'}\n      dataTransfer.sendAll(msg); }\n\n    else if (cmd === 'socket/nick') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 0, cmd: 'socket/nick', payload: 'Peter Pan'}\n      const nickname = msg.payload;\n      try {\n        await socketStorage.setNick(socket, nickname);\n        msg.payload = socket.extension.nickname;\n      } catch (err) {\n        msg.cmd = 'error';\n        msg.payload = err.message;\n      }\n      socket.extension.sendSelf(msg); }\n\n\n    /*** room commands ***/\n    else if (cmd === 'room/enter') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 0, cmd: 'room/enter', payload: 'My Chat Room'}\n      const roomName = payload;\n      socketStorage.roomEnter(socket, roomName);\n      msg.payload = `Entered in the room '${roomName}'`;\n      socket.extension.sendSelf(msg); }\n\n    else if (cmd === 'room/exit') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 0, cmd: 'room/exit', payload: 'My Chat Room'}\n      const roomName = payload;\n      socketStorage.roomExit(socket, payload);\n      msg.payload = `Exited from the room '${roomName}'`;\n      socket.extension.sendSelf(msg); }\n\n    else if (cmd === 'room/exitall') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 0, cmd: 'room/exitall'}\n      socketStorage.roomExitAll(socket);\n      msg.payload = 'Exited from all rooms';\n      socket.extension.sendSelf(msg); }\n\n    else if (cmd === 'room/send') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 'My Chat Room', cmd: 'room/send', payload: 'Some message to room clients.'}\n      const roomName = to;\n      dataTransfer.sendRoom(msg, socket, roomName); }\n\n\n    /*** route command ***/\n    else if (cmd === 'route') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 0, cmd: 'route', payload: {uri: 'shop/login', body: {username:'mark', password:'thG5$#w'}}}\n      eventEmitter.emit('route', msg, socket, dataTransfer, socketStorage, eventEmitter); }\n\n\n    /*** question commands ***/\n    else if (cmd === 'question/socket/id') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 210129163129492111, cmd: 'question/socket/id'}\n      msg.payload = socket.extension.id;\n      socket.extension.sendSelf(msg); }\n\n    else if (cmd === 'question/socket/list') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 210129163129492111, cmd: 'question/socket/list'}\n      const sockets = await socketStorage.find();\n      const socket_ids_nicks = sockets.map(socket => { return {id: socket.extension.id, nickname: socket.extension.nickname}; });\n      msg.payload = socket_ids_nicks; // {id:number, nickname:string}\n      socket.extension.sendSelf(msg); }\n\n    else if (cmd === 'question/room/list') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 210129163129492111, cmd: 'question/room/list'}\n      const rooms = await socketStorage.roomList();\n      msg.payload = rooms;\n      socket.extension.sendSelf(msg); }\n\n    else if (cmd === 'question/room/listmy') {\n      // {id: 210129163129492000, from: 210129163129492111, to: 210129163129492111, cmd: 'question/room/listmy'}\n      const rooms = await socketStorage.roomListOf(msg.from);\n      msg.payload = rooms;\n      socket.extension.sendSelf(msg); }\n\n  }\n\n\n\n  /******* HELPERS ********/\n  /**\n   * Helper to test msg properties.\n   * @param {string[]} msgObjProperties - propewrties of the \"msg\" object\n   */\n  _testFields(msgObjProperties) {\n    const allowedFields = ['id', 'from', 'to', 'cmd', 'payload'];\n    const requiredFields = ['id', 'from', 'to', 'cmd'];\n    let tf = true;\n\n    // check if every of the msg properties are in allowed fields\n    for (const prop of msgObjProperties) {\n      if (allowedFields.indexOf(prop) === -1) { tf = false; break; }\n    }\n\n    // check if every of required fields is present\n    for (const requiredField of requiredFields) {\n      if(msgObjProperties.indexOf(requiredField) === -1) { tf = false; break; }\n    }\n\n    return tf;\n  }\n\n\n}\n\n\n\nmodule.exports = new JsonRWS();\n\n},{}],5:[function(require,module,exports){\n/**\n * Subprotocol name: raw\n * HTTP header: \"Sec-WebSocket-Protocol\": \"raw\"\n *\n * Subprotocol description:\n *  The simplest subprotocol.\n */\n\n\nclass Raw {\n\n  constructor() {\n    this.delimiter = '';\n  }\n\n  /*********** INCOMING MESSAGES ***********/\n  /**\n   * Execute the subprotocol for incoming messages.\n   * @param {string} msgSTR -incoming message\n   * @returns {string}\n   */\n  incoming(msgSTR) {\n    const msg = msgSTR;\n    return msg;\n  }\n\n\n\n  /*********** OUTGOING MESSAGES ***********/\n  /**\n   * Execute the subprotocol for outgoing messages.\n   * @param {any} msg - outgoing message\n   * @returns {string}\n   */\n  outgoing(msg) {\n    let msgSTR = msg;\n    if (typeof msg === 'object') { msgSTR = JSON.stringify(msg); }\n    return msgSTR;\n  }\n\n\n\n  /*********** PROCESS MESSAGES ***********/\n  /**\n   * Process client messages internally.\n   * @returns {void}\n   */\n  async process() {}\n\n\n}\n\n\nmodule.exports = new Raw();\n\n},{}]},{},[1]);\n"],"file":"client13jsonRWS-min.js"}